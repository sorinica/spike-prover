specification : IWC003 % conjectures taken from http://www.cs.nott.ac.uk/~lad/research/challenges/IWC003.txt
sorts : bool list nat;

constructors :

true : bool;
false : bool;
Nil : -> list;
Cons__ : nat list -> list;
0: nat;
S_: nat -> nat;


defined functions:

app__: list list -> list;
member__: nat list -> bool;

axioms:

app(Nil, x) = x;
app(Cons(x,l), l1) = Cons(x, app(l,l1));

member(x, Nil) = false;
x<> y => member (x, Cons (y,z)) = member (x, z);
x = y => member (x, Cons(y, z)) = true;

greater:

app: Cons Nil;
member: true false Cons Nil;
 
properties:

system_is_sufficiently_complete ;
system_is_strongly_sufficiently_complete ;
system_is_ground_convergent ;


Strategy:

% instances of Delete
tautology_rule                   = delete(id, [tautology]);
subsumption_rule                 = delete(id, [subsumption (L|C)]);
negative_clash_rule              = Delete(id, [negative_clash]);

% instances of Simplify
decomposition_rule = simplify(id, [negative_decomposition]);
conditional_rewriting_rule = simplify(id, [conditional_rewriting(normalize, L|R|C, *)]);
 total_case_rewriting_rule        = simplify(id, [total_case_rewriting (simplify_strat, r, *)]);
% instances of AddPremise
induction = add_premise(generate,[id]);
induction_eq = add_premise(generate_eq,[id]);

stra = repeat (try (
                    tautology_rule,
                    negative_clash_rule,
                    subsumption_rule,
                    decomposition_rule,
                    conditional_rewriting_rule,
                     total_case_rewriting_rule,
                    print_goals
));

fullind = (repeat(stra, induction), print_goals_with_history);

start_with: fullind

conjectures: 
member (x, y) = true => member(x,  (app(y, z))) = true;