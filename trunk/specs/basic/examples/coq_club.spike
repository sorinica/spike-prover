%mutual example taken from coq_club posted by Guilhem Moulin on 26/05/09

% Definition pif (c:nat*list nat) := fst c + length (snd c).

% Function f (c:nat*list nat) {measure pif} : nat :=
%  match fst c with
%    | 0   => 0
%    | S n => f (n,snd c) + g (n,snd c)
%  end

% with g (c:nat*list nat) {measure pif} : nat :=
%  match snd c with
%    | nil  => 0
%    | a::l => f (fst c,l) + g (fst c,l)
%  end.

specification : coq_club

sorts: bool nat pair list;

constructors:

0    :          -> nat;
S_ : nat -> nat;
true : bool;
false : bool;
Pair__: nat list -> pair;
Cons__: nat list -> list;
Nil : -> list;

defined functions:

_+_ : nat nat -> nat; 
pif_: pair-> nat;
f_: pair -> nat;
g_: pair -> nat;
fst_: Pair -> nat;
snd_: Pair -> list;
length_: list -> nat;

axioms:

0 + x = x;
S(x) + y = S(x + y);

fst(Pair (x, l)) = x;
snd(Pair (x, l)) = l;

length(Nil) = 0;
length(Cons(x,l)) = S(length(l));

pif(c) = fst(c) + length(snd(c));

f(Pair (0, l)) = 0;
f(Pair (S(n), l)) = f(Pair (n, l)) + g(Pair (n, l));

g(Pair (x,Nil)) = 0;
g(Pair (x,Cons(y,l))) = f(Pair(x,l)) + g(Pair(x,l));

equiv:

f g; 

properties:

system_is_sufficiently_complete ;
system_is_strongly_sufficiently_complete ;
system_is_ground_convergent ;

Strategy:

% instances of Delete
tautology_rule                   = delete(id, [tautology]);
subsumption_rule                 = delete(id, [subsumption (L|C)]);
negative_clash_rule              = Delete(id, [negative_clash]);

% instances of Simplify
decomposition_rule = simplify(id, [negative_decomposition]);
conditional_rewriting_rule = simplify(id, [conditional_rewriting(normalize, L|R|C, *)]);

% instances of AddPremise
induction = add_premise(generate,[id]);
induction_eq = add_premise(generate_eq,[id]);

stra = repeat (try (
                    tautology_rule,
                    negative_clash_rule,
                    subsumption_rule,
                    decomposition_rule,
                    conditional_rewriting_rule,
                    
                    print_goals
));

fullind = (repeat(stra, induction_eq), print_goals_with_history);

start_with: fullind

conjectures: 
true=true;