Fequational_extension
R15 Coq.Lists.List <> <> lib
R36 Coq.Bool.Bool <> <> lib
R57 weaved_relation <> <> lib
R89 closure <> <> lib
R106 term_spec <> <> lib
R125 equational_theory_spec <> <> lib
R164 terminaison <> <> lib
R196 equational_theory_spec <> <> mod
mod 185 <> Make
prf 233 Make one_step_list_same_length
R330 Coq.Init.Logic "x = y" not
R320 Coq.Lists.List <> length def
R332 Coq.Lists.List <> length def
R280 weaved_relation <> one_step_list ind
R295 equational_extension Eqt one_step ind
R376 Coq.Init.Logic <> sym_eq thm
R420 equational_extension Eqt one_step ind
R390 weaved_relation <> one_step_list_length_eq thm
R376 Coq.Init.Logic <> sym_eq thm
R420 equational_extension Eqt one_step ind
R390 weaved_relation <> one_step_list_length_eq thm
prf 461 Make rwr_as_star
R508 terminaison <> star ind
R516 equational_extension Eqt one_step ind
R490 equational_extension Eqt rwr def
R569 terminaison <> star_R thm
R569 terminaison <> star_R thm
R598 terminaison <> star_trans thm
R598 terminaison <> star_trans thm
prf 671 Make one_step_list_star_decompose_cons
R796 Coq.Init.Logic "'exists' x , p" not
R807 Coq.Init.Logic "'exists' x , p" not
R838 Coq.Init.Logic "A /\ B" not
R829 Coq.Init.Logic "x = y" not
R833 Coq.Lists.List "x :: y" not
R885 Coq.Init.Logic "A /\ B" not
R848 TransClosure <> refl_trans_clos ind
R865 equational_extension Eqt one_step ind
R894 TransClosure <> refl_trans_clos ind
R911 weaved_relation <> one_step_list ind
R926 equational_extension Eqt one_step ind
R728 TransClosure <> refl_trans_clos ind
R779 Coq.Lists.List "x :: y" not
R745 weaved_relation <> one_step_list ind
R760 equational_extension Eqt one_step ind
R991 Coq.Lists.List "x :: y" not
R991 Coq.Lists.List "x :: y" not
R1050 Coq.Init.Logic <> refl_equal constr
R1050 Coq.Init.Logic <> refl_equal constr
R1734 Coq.Init.Logic <> refl_equal constr
R1734 Coq.Init.Logic <> refl_equal constr
R1842 Coq.Init.Logic <> refl_equal constr
R1842 Coq.Init.Logic <> refl_equal constr
R1871 TransClosure <> refl_trans_clos_is_trans thm
R1871 TransClosure <> refl_trans_clos_is_trans thm
R1985 Coq.Init.Logic <> refl_equal constr
R1985 Coq.Init.Logic <> refl_equal constr
R2093 Coq.Init.Logic <> refl_equal constr
R2093 Coq.Init.Logic <> refl_equal constr
R2136 TransClosure <> refl_trans_clos_is_trans thm
R2136 TransClosure <> refl_trans_clos_is_trans thm
prf 2217 Make one_step_list_star_decompose_nil
R2333 Coq.Init.Logic "x = y" not
R2335 Coq.Lists.List <> nil constr
R2269 TransClosure <> refl_trans_clos ind
R2318 Coq.Lists.List <> nil constr
R2286 weaved_relation <> one_step_list ind
R2301 equational_extension Eqt one_step ind
R2377 Coq.Lists.List <> nil constr
R2381 equational_extension Eqt.T term ind
R2377 Coq.Lists.List <> nil constr
R2381 equational_extension Eqt.T term ind
R2413 Coq.Init.Logic <> refl_equal constr
R2413 Coq.Init.Logic <> refl_equal constr
prf 2546 Make one_step_list_star_l
R2632 TransClosure <> refl_trans_clos ind
R2690 Coq.Lists.List "x :: y" not
R2683 Coq.Lists.List "x :: y" not
R2649 weaved_relation <> one_step_list ind
R2664 equational_extension Eqt one_step ind
R2589 TransClosure <> refl_trans_clos ind
R2606 equational_extension Eqt one_step ind
R2813 Coq.Lists.List "x :: y" not
R2813 Coq.Lists.List "x :: y" not
prf 2880 Make one_step_list_star_r
R2983 TransClosure <> refl_trans_clos ind
R3041 Coq.Lists.List "x :: y" not
R3034 Coq.Lists.List "x :: y" not
R3000 weaved_relation <> one_step_list ind
R3015 equational_extension Eqt one_step ind
R2923 TransClosure <> refl_trans_clos ind
R2940 weaved_relation <> one_step_list ind
R2955 equational_extension Eqt one_step ind
R3165 Coq.Lists.List "x :: y" not
R3133 TransClosure <> refl_trans_clos_is_trans thm
R3165 Coq.Lists.List "x :: y" not
R3133 TransClosure <> refl_trans_clos_is_trans thm
prf 3254 Make one_step_list_refl_trans_clos
R3411 TransClosure <> refl_trans_clos ind
R3469 Coq.Lists.List "x :: y" not
R3462 Coq.Lists.List "x :: y" not
R3428 weaved_relation <> one_step_list ind
R3443 equational_extension Eqt one_step ind
R3352 TransClosure <> refl_trans_clos ind
R3369 weaved_relation <> one_step_list ind
R3384 equational_extension Eqt one_step ind
R3309 TransClosure <> refl_trans_clos ind
R3326 equational_extension Eqt one_step ind
R3548 Coq.Lists.List "x :: y" not
R3516 TransClosure <> refl_trans_clos_is_trans thm
R3548 Coq.Lists.List "x :: y" not
R3516 TransClosure <> refl_trans_clos_is_trans thm
R3561 equational_extension Make one_step_list_star_r thm
R3561 equational_extension Make one_step_list_star_r thm
R3601 equational_extension Make one_step_list_star_l thm
R3601 equational_extension Make one_step_list_star_l thm
prf 3698 Make one_step_ind2
R4475 equational_extension Eqt one_step ind
R4464 equational_extension Eqt.T term ind
R4464 equational_extension Eqt.T term ind
R4423 weaved_relation <> tail_step constr
R4415 Coq.Lists.List "x :: y" not
R4405 Coq.Lists.List "x :: y" not
R4342 weaved_relation <> one_step_list ind
R4357 equational_extension Eqt one_step ind
R4326 Coq.Lists.List <> list ind
R4331 equational_extension Eqt.T term ind
R4326 Coq.Lists.List <> list ind
R4331 equational_extension Eqt.T term ind
R4311 equational_extension Eqt.T term ind
R4253 weaved_relation <> head_step constr
R4264 equational_extension Eqt one_step ind
R4246 Coq.Lists.List "x :: y" not
R4236 Coq.Lists.List "x :: y" not
R4189 equational_extension Eqt one_step ind
R4173 Coq.Lists.List <> list ind
R4178 equational_extension Eqt.T term ind
R4162 equational_extension Eqt.T term ind
R4162 equational_extension Eqt.T term ind
R4109 equational_extension Eqt in_context constr
R4096 equational_extension Eqt.T Term constr
R4083 equational_extension Eqt.T Term constr
R4023 weaved_relation <> one_step_list ind
R4038 equational_extension Eqt one_step ind
R4007 Coq.Lists.List <> list ind
R4012 equational_extension Eqt.T term ind
R4007 Coq.Lists.List <> list ind
R4012 equational_extension Eqt.T term ind
R3990 equational_extension Eqt.T symbol syndef
R3947 equational_extension Eqt at_top constr
R3922 equational_extension Eqt axiom ind
R3911 equational_extension Eqt.T term ind
R3911 equational_extension Eqt.T term ind
R3845 weaved_relation <> one_step_list ind
R3860 equational_extension Eqt one_step ind
R3834 Coq.Lists.List <> list ind
R3839 equational_extension Eqt.T term ind
R3834 Coq.Lists.List <> list ind
R3839 equational_extension Eqt.T term ind
R3780 equational_extension Eqt one_step ind
R3774 equational_extension Eqt.T term ind
R3774 equational_extension Eqt.T term ind
R3731 Coq.Relations.Relation_Definitions <> relation def
R3740 equational_extension Eqt.T term ind
prf 4785 Make star_list
R4873 TransClosure <> refl_trans_clos ind
R4915 equational_extension Eqt.T Term constr
R4903 equational_extension Eqt.T Term constr
R4890 equational_extension Eqt one_step ind
R4817 TransClosure <> refl_trans_clos ind
R4834 weaved_relation <> one_step_list ind
R4849 equational_extension Eqt one_step ind
R5082 equational_extension Eqt.T Term constr
R5082 equational_extension Eqt.T Term constr
R5161 Coq.Lists.List <> <> lib
R5182 closure_extension <> <> lib
prf 5208 Make star_cons
R5339 TransClosure <> refl_trans_clos ind
R5395 Coq.Lists.List "x :: y" not
R5387 Coq.Lists.List "x :: y" not
R5356 weaved_relation <> one_step_list ind
R5371 equational_extension Eqt one_step ind
R5283 TransClosure <> refl_trans_clos ind
R5300 weaved_relation <> one_step_list ind
R5315 equational_extension Eqt one_step ind
R5243 TransClosure <> refl_trans_clos ind
R5260 equational_extension Eqt one_step ind
R5476 Coq.Lists.List "x :: y" not
R5444 TransClosure <> refl_trans_clos_is_trans thm
R5476 Coq.Lists.List "x :: y" not
R5444 TransClosure <> refl_trans_clos_is_trans thm
R5548 closure_extension <> refl_trans_clos_with_R thm
R5548 closure_extension <> refl_trans_clos_with_R thm
R5639 Coq.Lists.List "x :: y" not
R5607 TransClosure <> refl_trans_clos_is_trans thm
R5639 Coq.Lists.List "x :: y" not
R5607 TransClosure <> refl_trans_clos_is_trans thm
R5654 closure_extension <> refl_trans_clos_with_R thm
R5654 closure_extension <> refl_trans_clos_with_R thm
R5781 closure_extension <> refl_trans_clos_with_R thm
R5781 closure_extension <> refl_trans_clos_with_R thm
R5871 Coq.Lists.List "x :: y" not
R5839 TransClosure <> refl_trans_clos_is_trans thm
R5871 Coq.Lists.List "x :: y" not
R5839 TransClosure <> refl_trans_clos_is_trans thm
R5885 closure_extension <> refl_trans_clos_with_R thm
R5885 closure_extension <> refl_trans_clos_with_R thm
prf 5961 Make cons_star
R6095 Coq.Init.Logic "A /\ B" not
R6062 TransClosure <> refl_trans_clos ind
R6079 equational_extension Eqt one_step ind
R6100 TransClosure <> refl_trans_clos ind
R6117 weaved_relation <> one_step_list ind
R6132 equational_extension Eqt one_step ind
R5996 TransClosure <> refl_trans_clos ind
R6052 Coq.Lists.List "x :: y" not
R6044 Coq.Lists.List "x :: y" not
R6013 weaved_relation <> one_step_list ind
R6028 equational_extension Eqt one_step ind
R6196 Coq.Lists.List "x :: y" not
R6220 Coq.Init.Logic <> refl_equal constr
R6196 Coq.Lists.List "x :: y" not
R6220 Coq.Init.Logic <> refl_equal constr
R6277 Coq.Lists.List "x :: y" not
R6300 Coq.Init.Logic <> refl_equal constr
R6277 Coq.Lists.List "x :: y" not
R6300 Coq.Init.Logic <> refl_equal constr
R6905 Coq.Init.Logic <> refl_equal constr
R6890 Coq.Init.Logic <> refl_equal constr
R6905 Coq.Init.Logic <> refl_equal constr
R6890 Coq.Init.Logic <> refl_equal constr
R7153 Coq.Init.Logic <> refl_equal constr
R7138 Coq.Init.Logic <> refl_equal constr
R7153 Coq.Init.Logic <> refl_equal constr
R7138 Coq.Init.Logic <> refl_equal constr
R7440 Coq.Init.Datatypes <> bool ind
R7419 Coq.Lists.List <> list ind
R7404 Coq.Init.Datatypes <> bool ind
R7474 Coq.Lists.List <> nil constr
R7481 Coq.Init.Datatypes <> false constr
R7497 Coq.Lists.List "x :: y" not
R7504 Coq.Init.Datatypes <> orb def
R7523 equational_extension <> inb def
R7419 Coq.Lists.List <> list ind
R7404 Coq.Init.Datatypes <> bool ind
R7404 Coq.Init.Datatypes <> bool ind
R7419 Coq.Lists.List <> list ind
R7440 Coq.Init.Datatypes <> bool ind
R7474 Coq.Lists.List <> nil constr
R7481 Coq.Init.Datatypes <> false constr
R7497 Coq.Lists.List "x :: y" not
R7504 Coq.Init.Datatypes <> orb def
R7523 equational_extension <> inb def
prf 7560 Make inb_equiv
R7669 Coq.Init.Logic "A <-> B" not
R7662 Coq.Lists.List <> In def
R7691 Coq.Init.Logic "x = y" not
R7673 equational_extension Make inb def
R7692 Coq.Init.Datatypes <> true constr
R7626 Coq.Init.Logic "A <-> B" not
R7623 Coq.Init.Logic "x = y" not
R7643 Coq.Init.Logic "x = y" not
R7645 Coq.Init.Datatypes <> true constr
R7763 equational_extension Make inb def
R7763 equational_extension Make inb def
sec 7925 Make is_def
var 7944 Make.is_def defined_list
R7959 Coq.Lists.List <> list ind
R7964 equational_extension Eqt.T symbol syndef
var 7984 Make.is_def rules
R7992 Coq.Relations.Relation_Definitions <> relation def
R8001 equational_extension Eqt.T term ind
var 8019 Make.is_def rule_list
R8031 Coq.Lists.List <> list ind
R8041 Coq.Init.Datatypes "x * y" not
R8037 equational_extension Eqt.T term ind
R8042 equational_extension Eqt.T term ind
var 8062 Make.is_def rules_equiv
R8105 Coq.Init.Logic "A <-> B" not
R8109 Coq.Lists.List <> In def
R8112 Coq.Init.Datatypes "( x , y , .. , z )" not
R8089 equational_extension Eqt.T term ind
R8089 equational_extension Eqt.T term ind
var 8147 Make.is_def defined_list_equiv
R8218 Coq.Init.Logic "A <-> B" not
R8198 Coq.Lists.List <> In def
R8222 equational_extension Eqt defined ind
R8184 equational_extension Eqt.T symbol syndef
def 8253 Make is_def
R8272 equational_extension Make inb def
R8278 equational_extension Eqt.T.F.Symb eq_bool defax
prf 8318 Make is_def_equiv
R8379 Coq.Init.Logic "A <-> B" not
R8372 Coq.Init.Logic "x = y" not
R8363 equational_extension Make is_def def
R8374 Coq.Init.Datatypes <> true constr
R8383 equational_extension Eqt defined ind
R8349 equational_extension Eqt.T symbol syndef
R8490 equational_extension Make inb_equiv thm
R8502 equational_extension Eqt.T.F.Symb eq_bool defax
R8490 equational_extension Make inb_equiv thm
R8502 equational_extension Eqt.T.F.Symb eq_bool defax
R8575 equational_extension Eqt.T.F.Symb eq_bool_ok defax
R8575 equational_extension Eqt.T.F.Symb eq_bool_ok defax
R8609 equational_extension Eqt.T.F.Symb eq_bool defax
R8609 equational_extension Eqt.T.F.Symb eq_bool defax
R8674 equational_extension Make.is_def <> sec
R8687 equational_extension Make <> mod
